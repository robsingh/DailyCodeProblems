'''
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 1 and 2, the first 10 terms will be:
1,2,3,5,8,13,21,34,55,89,....

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
'''

total_sum = 0
fib_seq = [1,2] # starting with 1 and 2

while fib_seq[-1] <= 4000000:
    next_num = fib_seq[-1] + fib_seq[-2]
    if next_num > 4000000:
        break # stop if next term exceeds four million
    fib_seq.append(next_num)

# sum only even-valued terms
for num in fib_seq:
    if num % 2 == 0:
        total_sum += num


print("Sum of even-valued terms: ", total_sum)

# Is this the most efficient solution? NO. 
# Why? Because we are generating upto 4M numbers, and checking EACH TERM if it is even. Not so efficient, right?
# Now if we think about it, I notice a pattern. That's what I try to find in every problem I solve.
# Sequence of Fibonacci sequence is odd,odd,even,odd,odd,even....
# which trims down to the fact that every third Fibonacci number is even. We can skip generating two out of
# every three terms. Below is the implementation:

first, second = 2,8 # first two fib numbers
total_sum = first

# continue generating even terms until they exceed 4M
while second <= 4000000:
    total_sum += second
    # each next EVEN fib number is four times the current even term plus the previous even term
    first, second = second, 4 * second + first

print("Sum of even-valued numbers: ", total_sum)






